generator client {
  provider = "prisma-client-js"
  output   = "../node_modules/.prisma/client"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Admin {
  id                                  String   @id @default(uuid())
  managementType                      String
  submittedAt                         DateTime @default(now())
  fullName                            String
  email                               String   @unique
  phone                               String
  designation                         String
  profilePhoto                        String?
  clinicName                          String
  clinicType                          String
  registrationNumber                  String
  establishmentYear                   String
  address                             String?
  departments                         String
  doctorsCount                        String
  communicationMode                   String
  governmentIdPath                    String?
  governmentIdOriginalName            String?
  registrationCertificatePath         String?
  registrationCertificateOriginalName String?
  accreditationPath                   String?
  accreditationOriginalName           String?
  createdAt                           DateTime @default(now())
  updatedAt                           DateTime @updatedAt
}

model Doctor {
  id                                    String   @id @default(cuid())
  createdAt                             DateTime @default(now())
  updatedAt                             DateTime @updatedAt
  fullName                              String
  emailAddress                          String   @unique
  phoneNumber                           String
  dateOfBirth                           String
  gender                                String
  profilePhoto                          String?
  medicalLicenseNumber                  String
  specialization                        String
  yearsOfExperience                     String
  associatedClinicHospitalName          String
  consultationType                      String
  medicalSchoolName                     String?
  medicalSchoolGraduationYear           String?
  medicalSchoolDegree                   String?
  governmentIssuedId                    String?
  medicalDegreeCertificate              String?
  medicalCouncilRegistrationCertificate String?
  experienceCertificate                 String?
  availableConsultationHours            String
  preferredModeOfConsultation           String
  languageSpoken                        String
  additionalInformation                 String?
  emergencyContactDetails               String
  personalBio                           String?
  @@map("doctors")
}

model Patient {
  id                 String    @id @default(uuid())
  email              String    @unique
  phone              String?
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt
  supabaseUid        String    @unique
  title              String?
  name               String?
  birthDate          DateTime?
  gender             String?
  bloodGroup         String?
  height             Int?
  weight             Int?
  maritalStatus      String?
  contactNumber      String?
  alternateNumber    String?
  smokingHabit       String?
  alcoholConsumption String?
  activityLevel      String?
  dietHabit          String?
  occupation         String?
  allergies          String[]  @default([])
  medications        String[]  @default([])
  chronicDiseases    String[]  @default([])
  injuries           String[]  @default([])
  surgeries          String[]  @default([])
}

model ContactMessage {
  id        String   @id @default(uuid())
  name      String
  email     String
  phone     String
  subject   String?
  message   String?
  createdAt DateTime @default(now())
}

model SalesCard {
  id        String   @id @default(uuid())
  fullName  String
  email     String
  phone     String
  company   String?
  message   String?
  createdAt DateTime @default(now())
}

model Payment {
  id            Int           @id @default(autoincrement())
  avatarUrl     String?
  payerName     String
  amount        Decimal       @db.Decimal(15, 2)
  paymentDate   DateTime
  receiveDate   DateTime
  transactionId String
  paymentMode   PaymentMode
  status        PaymentStatus
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
}

model Self {
  id           Int      @id @default(autoincrement())
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  // Personal Info
  fullName      String
  emailAddress  String   @unique
  phoneNumber   String
  dateOfBirth   DateTime?
  gender        String
  profilePhoto  String?   // URL/path to file

  // Clinic Info
  clinicName          String
  clinicType          String
  registrationNumber  String
  establishmentYear   String
  address             String?

  // Professional Details
  medicalLicenseNumber        String
  specialization              String
  yearsOfExperience           Int
  associatedClinicHospitalName String
  consultationType             String

  // Documents
  governmentIdPath                   String?
  governmentIdOriginalName           String?
  registrationCertificatePath        String?
  registrationCertificateOriginalName String?
  accreditationPath                  String?
  accreditationOriginalName          String?

  // Verification Documents
  medicalDegreeCertificate              String?
  medicalCouncilRegistrationCertificate String?
  experienceCertificate                 String?

  // Work Schedule Preferences
  availableConsultationHours  String?
  preferredModeOfConsultation String?
  languageSpoken              String?
  additionalInformation       String?
  emergencyContactDetails     String?
  personalBio                 String?
}


model UserAccess {
  id          Int         @id @default(autoincrement())
  name        String
  department  Department
  dateOfJoin  DateTime
  accessLevel AccessLevel
  status      UserStatus
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
}

model RequestDemo {
  id        String   @id @default(cuid())
  fullName  String
  email     String
  phone     String
  org       String?  // Nullable
  role      String?  // Nullable
  notes     String?  // Nullable
  createdAt DateTime @default(now())
}

model JobDescription {
  id                  String    @id @default(uuid())
  title               String
  department          String
  type                String
  location            String
  description         String
  salary              String?
  responsibilities    String[]  @default([])
  requirements        String[]  @default([])
  benefits            String[]  @default([])
  howToApply          String[]  @default([])
  emoluments          String[]  @default([])
  whyJoin             String[]  @default([])
  applicationDeadline DateTime?
  postedDate          DateTime  @default(now())
  category            String?
  jobType             String?

  @@map("job_descriptions")
}

enum PaymentMode {
  Cash
  Online
}

enum PaymentStatus {
  Failed
  Paid
  Refunded
  Cancel
  Pending
}

enum Department {
  Manager
  Doctor
  Nurse
  Stuff
}

enum AccessLevel {
  Full
  Partial
  Non
}

enum UserStatus {
  Active
  Inactive
}
