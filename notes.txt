import { Geist, Geist_Mono } from "next/font/google";  --> This line brings in two fonts ‚Äì Geist and Geist Mono ‚Äì from Google Fonts using Next.js‚Äôs built-in support.

const geistSans = Geist({
  variable: "--font-geist-sans",
  subsets: ["latin"],
});

        - Geist(...) ‚Üí Loads the Geist Sans font.
        - variable: "--font-geist-sans" ‚Üí Saves the font into a CSS variable so we can use it later in styles.
        - subsets: ["latin"] ‚Üí Only loads letters used in English and similar languages to reduce size.

className={`${geistSans.variable} ${geistMono.variable} antialiased`}
        - Adds the Geist Sans font via CSS variable.
        - Adds the Geist Mono font via CSS variable.
        - antialiased ‚Üí Makes text smoother and easier to read.




In TypeScript, Readonly is a utility type that makes all the properties of an object immutable, meaning they cannot be changed after they are set. It ensures that the object is treated as read-only, which helps prevent accidental modifications.

    Why is it used here?
        In your code, Readonly<{ children: React.ReactNode }> is used to make the children property immutable. This means that inside the RootLayout component, you cannot accidentally reassign or modify the children prop. It enforces the idea that props passed to a React component should not be changed.

    Example to clarify:
    Why is this useful?
        Immutability: It ensures that props or objects are not accidentally modified, which aligns with React's principle of immutability.
        
        Code Safety: It makes your code safer and easier to debug by preventing unintended side effects.
        In your case, using Readonly ensures that the children prop passed to RootLayout remains unchanged, which is a good practice for React components.


generator client {
  provider = "prisma-client-js"
  output   = "../node_modules/.prisma/client"
}
        ** you need to add an output property since starting with Prisma 7.0.0, specifying this path will be mandatory. 
        ** The path "../node_modules/.prisma/client" is the default location where Prisma generates its client, so this change just makes it explicit rather than relying on the default behavior.


what is difference between .env and .env.local file ?
    .env	    --> Shared config for all devs/envs
    .env.local	--> Dev-specific or secret overrides. It overrides values in .env


**  In Next.js, using the NEXT_PUBLIC_ prefix in your .env variables is not always necessary, but it is required if you want to access the variable in the browser (client-side). If you want to use the environment variable on the frontend (in React components, etc.), you must prefix it with NEXT_PUBLIC_



const [createUserWithEmailAndPassword, user, loading, error] = useCreateUserWithEmailAndPassword(auth)
        createUserWithEmailAndPassword ‚Üí a function to create a user with email + password
        user ‚Üí info about the signed-up user (if successful)
        loading ‚Üí true while the request is in progress
        error ‚Üí any error that happens during signup


** OAuth (short for Open Authorization) is an open standard authorization protocol that allows one application to access data from another application without exposing user credentials (like username or password).
OAuth lets you log into one app using another app safely.

        Example:
        When you click "Sign in with Google" on a website ‚Äî that website doesn‚Äôt get your Google password.
        Instead, Google verifies you and tells the website:
        ‚úÖ "Yes, this user is valid, and here‚Äôs some basic info (like name and email)."

        üîê Key Roles in OAuth:

                -> User	                - The person using the app
                -> Client               - The app requesting access (like your website)
                -> Authorization Server	- The system that checks the user (e.g., Google, Facebook)
                -> Resource Server      - Where the data lives (e.g., user‚Äôs email, profile, etc.)
                -> Access Token	        - A temporary key that gives access to protected data without a password


-----

const sendOtp = async () => {
  if (!recaptchaRef.current) {
    recaptchaRef.current = new RecaptchaVerifier(auth, 'recaptcha-container', {
      size: 'invisible',
      callback: () => {
        console.log('reCAPTCHA solved')
      },
    })
  }
}
                Checks if reCAPTCHA is already created (!recaptchaRef.current)
                If not, it creates a new RecaptchaVerifier from Firebase.
                        - auth                  : your Firebase auth instance.
                        - 'recaptcha-container' : the HTML element where reCAPTCHA attaches.
                        - size: 'invisible'     : means the reCAPTCHA won't be shown visually (it runs silently).
                        - callback              : runs once the reCAPTCHA is successfully solved.

                Firebase requires reCAPTCHA before sending OTPs for security reasons:
                        - üõ°Ô∏è Prevents abuse	Stops bots from spamming OTP requests.
                        - ‚ö†Ô∏è Cost control	OTPs cost money. reCAPTCHA helps make sure only real users trigger them.


const result = await signInWithPhoneNumber(auth, phone, recaptchaRef.current)
        - auth                  : your Firebase authentication instance.
        - phone                 : the phone number you entered (e.g., +91xxxxxxxxxx).
        - recaptchaRef.current  : the reCAPTCHA verifier that ensures it's a human.

        It returns a confirmationResult object.
        This object contains a method called .confirm(userOTP), which you use later to verify the OTP entered by the user.

-------

The line ref={(el) => { inputRefs.current[index] = el; }} is using React's ref system to create references to DOM elements. Let me break it down in detail:

What it does:
        This code creates a direct reference to each input field in your OTP form, storing these references in an array so you can access and manipulate them programmatically.

How it works step by step:

        1. React's ref prop:

                - The ref prop in React lets you get a reference to the actual DOM element that gets rendered
                - Instead of passing a ref object directly, you're using a callback function approach


        2. Callback function:

                (el) => { inputRefs.current[index] = el; } is a callback function that React calls when:

                        - The component is mounted (with the actual DOM element as el)
                        - The component is unmounted (with null as el)

        3. Parameter el:

                - el is the actual DOM element (an <input> in this case) when the component renders
                - el becomes null when the component unmounts


        4. Storage in inputRefs:

                - inputRefs is a React useRef object created earlier with:
                        const inputRefs = useRef<(HTMLInputElement | null)[]>([null, null, null, null, null, null])

                - inputRefs.current is the mutable array that persists between renders
                - inputRefs.current[index] = el stores each input element at its corresponding index position


        5. The curly braces:

                -{ inputRefs.current[index] = el; } uses block syntax to make sure the function doesn't return anything
                -This addresses TypeScript's requirements for ref callbacks to have a void return type

----
import { fetchSignInMethodsForEmail } from 'firebase/auth'
const methods = await fetchSignInMethodsForEmail(auth, email)


        - fetchSignInMethodsForEmail is a method from the firebase/auth module in Firebase that lets you check which sign-in methods are available for a given email address.

        It's useful in scenarios like:
                - Determining whether a user has already registered.
                - Checking if a user signed up using Google/Facebook instead of email/password.
                - Preventing duplicate sign-ups and guiding users correctly.

        Parameters:
                - auth: The initialized Firebase auth object.
                - email: A string containing the user‚Äôs email address.

        Returns:
                A Promise<string[]> that resolves to an array of sign-in method identifiers like:
                        "password" ‚Äì Email/Password
                        "google.com" ‚Äì Google sign-in
                        "facebook.com" ‚Äì Facebook sign-in
                        "twitter.com", "github.com", etc.


-------
createAsyncThunk:
        createAsyncThunk is a function that helps you handle async operations (like API calls) in Redux, without writing tons of boilerplate.

        Why do we need it?
                Normally in Redux, handling something like fetching data from an API means:
                        - Dispatching a "loading" action.
                        - Then dispatching a "success" or "error" action depending on the result.
                        - Writing reducers for each step.

        But that‚Äôs a lot of work!
                With createAsyncThunk, Redux Toolkit automates all of this for you.



        getState():

                What is getState()?
                        getState() is a function you get inside Redux Thunks (like createAsyncThunk) that lets you read the current state of your Redux store.


                Simple Analogy:
                        Think of Redux as a big storage box holding all your app's data (like form inputs, user info, etc.).

                        getState() is like saying:
                        üëâ ‚ÄúHey Redux, show me what‚Äôs in the box right now.‚Äù


                ** getState() gives you the entire Redux state ‚Äî meaning all slices.
                getState() gives you access to your current Redux state.


                const state = getState() as { admin: AdminState };
                        You're telling TypeScript:
                                "Hey, out of the whole Redux state, I'm only interested in the admin slice right now."


                If you ever have multiple slices and want to access more than one, just grab them like:
                        const state = getState();
                        const adminData = state.admin;
                        const userData = state.user;


        rejectWithValue():

                rejectWithValue is used in createAsyncThunk to send a custom error message when your async function fails.

                Normally, when something goes wrong in a createAsyncThunk, it just throws a generic error. But with rejectWithValue, you can return a specific error message to the rejected case.

                eg: 
                export const fetchData = createAsyncThunk(
                  'data/fetch',
                  async (_, { rejectWithValue }) => {
                    try {
                      const res = await axios.get('/api/data');
                      return res.data;
                    } catch (err) {
                      // Send custom error to reducer
                      return rejectWithValue('Something went wrong while fetching data!');
                    }
                  }
                );



        here _ is for arg in : async (_, { rejectWithValue })
                When you define a thunk using createAsyncThunk, the first parameter in the async function is called arg. It‚Äôs the value you pass when you call the thunk.

                eg: 
                export const fetchUser = createAsyncThunk(
                  'user/fetchUser',
                  async (userId, thunkAPI) => {
                    const response = await axios.get(`/api/users/${userId}`);
                    return response.data;
                  }
                );

                When you call this thunk: 
                        dispatch(fetchUser('123'));

                arg will be '123' i.e userId (a.k.a. arg) will be '123'


        What is thunkAPI in createAsyncThunk?
                When you write a thunk using createAsyncThunk, the second parameter in the async function is called thunkAPI.

                It gives you some built-in tools that you can use inside the thunk.
                The thunkAPI object includes:

                        - dispatch        	: Dispatch other actions from inside the thunk
                        - getState        	: Access the current Redux state
                        - rejectWithValue 	: Return a custom error when something goes wrong
                        - extra           	: For injecting dependencies (advanced use)
                        - requestId       	: Unique ID for the thunk request
                        - signal  	        : Used for cancelling requests (like aborting fetch calls)

        
        ** fetchUser('123') is an async thunk, and async thunks return a function, not just plain data. Redux doesn‚Äôt automatically run functions ‚Äî it only works with actions. So we have to dispatch that thunk manually.

        ** When you return something from the createAsyncThunk async function like this:
                return response.data;
                That value gets automatically passed to your Redux slice's fulfilled case.

---------
What is ‚ÄúSerializable‚Äù?
        Serializable means:
                Data that can be safely converted to JSON and stored in Redux or sent over a network.

        üîπ Examples of serializable data:

                Strings ("hello")
                Numbers (123)
                Booleans (true/false)

        Plain objects ({ name: "Anish" })

        üîπ Examples of non-serializable data:

                JavaScript File objects (like images, PDFs, etc.)
                Functions
                DOM elements
                Dates (sometimes)

        - Redux expects all state and actions to be serializable so it can debug and track them safely.
        - You can‚Äôt store the actual File object in Redux because it‚Äôs non-serializable.
        - So instead, you extract basic info (name, size, type) from the file and store that in Redux.



** fileType as keyof typeof formErrors : 
        1. typeof formErrors - This gives you the type of the formErrors object
                eg:     {
                          name: string;
                          email: string;
                          password: string;
                        }

        2. keyof (typeof formErrors) - This extracts all the keys from that type.
                eg: 'name' | 'email' | 'password'
        
        3. as (keyof (typeof formErrors)) - This part is a type assertion. You're telling TypeScript: "I know this variable is one of the valid keys in formErrors, so treat it as such."

                eg: fileType as 'name' | 'email' | 'password'

        You're just assuring TypeScript that:
                - fileType really is one of the keys: 'name' | 'email' | 'password'
                - And it's safe to use it as a key.



----
Are we allowed to dispatch actual File objects using createAsyncThunk?
        ‚úÖ Yes, but only with one important condition:
        üëâ You should not store them in Redux state.


Object.entries() --> this method returns an array of the key/value pairs of an object.


----
Files Can't Be Sent as JSON
Normally when you send data via axios.post('/api', data), you send it as JSON:

{
  name: "Anish",
  profilePicture: someFile // ‚ùå This will break if it's a File object
}
But JSON cannot handle binary data like images or PDFs. So if you try to send a File in a JSON object, it either:

throws an error,

or silently fails (the file doesn‚Äôt arrive at the server).

-----
If you want to use an env variable in middleware.ts then move it to a NEXT_PUBLIC_ one.

        Next.js middleware runs on the Edge Runtime, not Node.js. That means:
                - It runs in a lightweight isolated environment.
                - Only specific environment variables are available ‚Äî and only if they're prefixed with NEXT_PUBLIC_ and set at build time.


-----
const response = NextResponse.next(); // NextResponse.next() tells Next.js to continue processing the request as usual. You're using response to modify the outgoing headers before continuing.

export const config = {
  matcher: '/api/:path*', // This means: The middleware only runs for any API route, like: /api/something,  /api/users/123,  etc.
};


-----
**create or write to a folder is not allowed in vercel since vercel‚Äôs serverless functions are read-only ‚Äî except for the /tmp directory.


-------
What is createContext?

        createContext is a React function used to share data (like auth state, theme, language, etc.) across many components without passing props manually at every level.


        Imagine you have a big React app with many components.
        Normally, to pass data (like a logged-in user or theme) to a child component, you'd use props like this:

                        <App user="Anish">
                          <Page>
                            <Header>
                              <UserInfo user="Anish" />
                            </Header>
                          </Page>
                        </App>

        This is called prop drilling ‚Äî passing props through many layers. It gets messy. createContext helps avoid that With Context, you can do:

                        <App>
                          <Page>
                            <Header>
                              <UserInfo />
                            </Header>
                          </Page>
                        </App>
        But UserInfo can still access the user, without needing it passed down! üéâ

        - What does createContext do?
        It lets you:
                - Create a "box" to hold some shared data.
                - Wrap parts of your app in a Provider to give access to that data.
                - Use a hook (useContext) to read the data from anywhere inside that box.


        Syntax:
                const MyContext = createContext(defaultValue);

        - Provide the context value:
                We now wrap our app (or part of it) in a Provider and pass the user:

                        <UserContext.Provider value={user}>
                          <Dashboard />
                        </UserContext.Provider>

        - Use the context value:
                        function Dashboard() {
                          const user = useContext(UserContext);
                          return <h1>Welcome, {user}!</h1>;  // Will show: Welcome, Anish!
                        }


        createContext()      :   Creates a shared box for data
        Provider             :   Lets you put data into the box
        useContext()         :   Lets you take data out of the box in child components